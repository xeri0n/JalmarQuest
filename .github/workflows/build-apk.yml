name: Android APK (Alpha)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build-apk:
    name: Build Android APK
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      JAVA_TOOL_OPTIONS: -Xmx4g
      GRADLE_OPTS: -Dorg.gradle.daemon=true -Dorg.gradle.jvmargs="-Xmx4g -Dfile.encoding=UTF-8"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses || true

      - name: Gradle cache
        uses: gradle/gradle-build-action@v2

      - name: Generate keystore if missing (alpha signing)
        shell: bash
        run: |
          if [ ! -f keystore.properties ] && [ ! -f release.keystore ]; then
            keytool -genkeypair -v \
              -keystore release.keystore \
              -alias jalmarquest \
              -keyalg RSA -keysize 2048 \
              -validity 10000 \
              -storepass android \
              -keypass android \
              -dname "CN=JalmarQuest Alpha, OU=Development, O=JalmarQuest, L=Unknown, ST=Unknown, C=US" \
              -noprompt
            cat > keystore.properties <<'EOF'
          storeFile=release.keystore
          storePassword=android
          keyAlias=jalmarquest
          keyPassword=android
          EOF
          fi

      - name: Show Gradle tasks for variants (informational)
        run: ./gradlew :app:android:tasks --all --no-daemon | grep -E "assemble(Alpha|Release|Debug)" || true

      - name: Build Release APK (skip tests)
        run: ./gradlew :app:android:assembleRelease -x test --stacktrace --no-daemon

      - name: Fallback to Debug APK (skip tests)
        if: failure()
        run: ./gradlew :app:android:assembleDebug -x test --stacktrace --no-daemon

      - name: Find APK files
        id: find-apk
        run: |
          APK_PATH=$(find app/android/build/outputs/apk -name "*.apk" -type f | head -n 1)
          if [ -z "$APK_PATH" ]; then
            echo "Error: No APK found"
            exit 1
          fi
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
          echo "apk_name=$(basename $APK_PATH)" >> $GITHUB_OUTPUT
          echo "apk_size=$(du -h $APK_PATH | cut -f1)" >> $GITHUB_OUTPUT

      - name: Generate release info
        id: release-info
        run: |
          VERSION="1.0.0-alpha-$(date +%Y%m%d-%H%M)"
          TAG="alpha-$(date +%Y%m%d-%H%M)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "date=$(date +'%Y-%m-%d %H:%M UTC')" >> $GITHUB_OUTPUT

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jalmarquest-apk-${{ github.sha }}
          path: |
            app/android/build/outputs/apk/**/*.apk
          if-no-files-found: error

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release-info.outputs.tag }}
          name: JalmarQuest Alpha ${{ steps.release-info.outputs.version }}
          body: |
            # JalmarQuest Alpha Release
            
            **Version:** ${{ steps.release-info.outputs.version }}
            **Build Date:** ${{ steps.release-info.outputs.date }}
            **Commit:** ${{ github.sha }}
            **APK Size:** ${{ steps.find-apk.outputs.apk_size }}
            
            ## ü¶â Features
            - Core gameplay with Jalmar the button quail
            - Butterfly Effect Engine with choice tracking
            - 46+ quests with branching narratives
            - Nest management system
            - Exploration encounters
            - Skills & crafting system
            - Multi-language support (EN/NO)
            
            ## üì± Installation
            1. Download the APK below
            2. Enable "Install from Unknown Sources" in Android settings
            3. Install the APK
            4. Launch JalmarQuest
            
            ## ‚öôÔ∏è Configuration
            - AI Director requires `GEMINI_API_KEY` environment variable for AI-generated content
            - Sandbox mode available without API key
            
            ## üß™ Testing Notes
            - This is an alpha build for testing purposes
            - Signed with temporary debug keystore
            - Report issues at: https://github.com/xeri0n/JalmarQuest/issues
          files: ${{ steps.find-apk.outputs.apk_path }}
          draft: false
          prerelease: true
          generate_release_notes: true
